import Head from 'next/head'
import {useState, useEffect, useRef} from 'react'
import Web3Modal from "web3modal"
import Form from '../components/form'
import {
  getProvider, 
  getNetwork, 
  getSigner, 
  getAddress, 
  truncateWalletAddress
} from "../helpers";
import { network } from '../constants'
import ViewNfts from '../components/ViewNfts'
import { initializeContract } from '../helpers';
import { AppBar, Button, Grid, Typography } from '@mui/material'
import AccountCircle from '@mui/icons-material/AccountCircle';

export default function Home() {
  const [walletConnect, setWalletConnect] = useState(false);
  const [walletAddress, setWalletAddress] = useState('');
  const [truncatedWalletAddress, setTruncatedWalletAddress] = useState('');
  const [nftData, setNftData] = useState([])
  const [alertType, setAlertType] = useState('');
  const [alertContent, setAlertContent] = useState('');
  const [isSnackBarOpen, setIsSnackBarOpen] = useState(false);
  const web3ModalRef = useRef();
  
  const connectWallet = async() => {
    const web3ModalInstance = await web3ModalRef.current.connect()

    setWalletConnect(true);

    const provider = getProvider(web3ModalInstance)

    const {chainId} = await getNetwork(provider);

    if(chainId != 4) {
      showNotification('error', 'Wrong network! Only rinkeby test network is allowed.')
    }

    const signer = getSigner(provider)

    const address = await getAddress(signer) 
    setTruncatedWalletAddress(truncateWalletAddress(address, 10));
    setWalletAddress(address)
    
    const nfts = await getNfts(provider, address)
    
    setNftData(nfts)
  }

  const showNotification = (alertType, alertMessage) => {
    setAlertType(alertType)
    setAlertContent(alertMessage)
    setIsSnackBarOpen(true)
  }

  const getTokenIds = async(arr, contract, address) => {
    const response = arr.map((data, index) => {
      return contract.tokenOfOwnerByIndex(address, index)
    })

    return await Promise.all(response)
  }

  const getTokenUris = async(tokenIds, contract) => {
    const response = tokenIds.map((data) => {
      return contract.tokenURI(data.toNumber())
    })

    return await Promise.all(response)
  }

  const getNftData = async(uris) => {
    const response = uris.map((uri) => {
        return fetch(uri).then(data => data.json())
    })

    return await Promise.all(response)
  }

  const getNfts = async(provider, address) => {
    const contract = initializeContract(provider)

    let userNftBalance = await contract.userNftBalance(address)
    
    const arr = new Array(userNftBalance).fill(0)

    const tokenIds = await getTokenIds(arr, contract, address)
    
    const tokenUris = await getTokenUris(tokenIds, contract)

    return await getNftData(tokenUris)
  }

  useEffect(() => {
    web3ModalRef.current = new Web3Modal({
      network: network,  
      cacheProvider: true,
      disableInjectedProvider: false,
    })
  }, [])

  return (
    <>
      <Head>
        <title>CURIE NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      { isSnackBarOpen && 
        <Snackbar 
          open={isSnackBarOpen} 
          autoHideDuration={10000} 
          onClose={() => {setIsSnackBarOpen(false); setMetadata({name: '', description: '', image:''}) }} 
          anchorOrigin={{vertical: 'top', horizontal: 'right'}}
          key={'top' + 'right'}
        > 
          <Alert 
            onClose={() => { setAlertType(''); setAlertContent('') }} 
            severity={alertType}
          > 
            {alertContent} 
          </Alert> 
        </Snackbar>
      }

      <AppBar style={{
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "center",
        width: '100%',
        flexWrap: 'wrap'
      }}>
        <Typography variant='h3' component="div" style={{ margin: '1rem'}}>
          CurieNFT 
        </Typography>
        {
          !walletConnect ? 
            <Button variant='outlined' 
              style={{height:'1.5rem', padding: '0.5rem', margin: 'auto 1rem', color: 'white', borderColor:'white'}} 
              onClick={connectWallet}
            >
              Connect Wallet
            </Button> : 
            <Typography variant='h6' component="p" style={{margin: 'auto 1rem', display: 'inline-flex'}}> 
              <AccountCircle style={{margin: 'auto .5rem'}}/> 
              {truncatedWalletAddress} 
            </Typography> 
        }
      </AppBar>

      <Grid container columnSpacing={1} style={{margin: '7rem 0 0.5rem'}}>  
        {walletConnect &&
          <Grid item sm={12} md={6} lg={4} xl={4} style={{ width: '100%', margin: 0, padding: 0 }}>
            <Form web3ModalRef={web3ModalRef} walletAddress={walletAddress} />
          </Grid>
        }
        {(walletAddress !== '' && nftData.length > 0) &&
          <Grid item sm={12} md={6} lg={8} xl={8} style={{ width: '100%', margin: 0, padding: 0  }}>
            <ViewNfts nfts={nftData}/>
          </Grid >
        }
      </Grid>
    </>
  )
}
